from datetime import datetime
import csv
import json
import util

"""Cleaning collected travel info for model training

The script takes in a list of Google returned travel info file
generated by fetchDistanceData.py script, then produce a csv
format of interested features from these info

Selected Features (csv format):
distance,lat1,lng1,lat2,lng2,steps,mode,requestTime,duration
- Note for mode value:
1 - "driving"
2 - "walking"
3 - "bicycling"
4 - "transit"
"""


# loading environment variables
DISTANCE_DATA_FILE_PATH = util.DISTANCE_DATA_FILE_PATH
CSV_DATA_FILE_PATH = util.CSV_DATA_FILE_PATH


# args validation
util.pathExist(DISTANCE_DATA_FILE_PATH)
util.pathWritable(CSV_DATA_FILE_PATH)


# This function finds the most common travel mode from given steps
# Each step is a Google step object
# For more info: https://developers.google.com/maps/documentation/directions/intro#Steps
def determineTravelMode(steps):
    if len(steps) == 0:
        raise Exception("Steps should contain at least one step!")
    travelModes = [step["travel_mode"]
                   for step in steps if step["travel_mode"] != "WALKING"]
    # A route often contains some "walking" between, so the model is "walking"
    # only when all the steps are in "walking" mode.
    if len(travelModes) == 0:
        return 2
    dist = {
        len([mode for mode in travelModes if mode == "DRIVING"]): 1,
        len([mode for mode in travelModes if mode == "BICYCLING"]): 3,
        len([mode for mode in travelModes if mode == "TRANSIT"]): 4
    }
    return dist[max(list(dist.keys()))]


def main():
    with open(DISTANCE_DATA_FILE_PATH) as f:
        content = f.read()
    # An array of Google Distance API responses (no validation, assume it's generated by fetchDistanceData.py)
    # For more info: https://developers.google.com/maps/documentation/directions/intro#DirectionsResponses
    resultArray = list(map(lambda obj: json.loads(obj), json.loads(content)))

    # Writing data to csv file while parsing travel info
    with open(CSV_DATA_FILE_PATH, mode='w') as outputFile:
        csvWriter = csv.writer(outputFile, delimiter=',',
                               quotechar='"', quoting=csv.QUOTE_MINIMAL)
        csvWriter.writerow(["distance", "lat1", "lng1", "lat2",
                            "lng2", "steps", "mode", "requestTime", "duration"])
        for travelInfo in resultArray:
            for route in travelInfo["routes"]:
                for leg in route["legs"]:
                    # csv format:
                    # distance,lat1,lng1,lat2,lng2,steps,mode,requestTime,duration
                    elem = [
                        leg["distance"]["value"],
                        leg["start_location"]["lat"],
                        leg["start_location"]["lng"],
                        leg["end_location"]["lat"],
                        leg["end_location"]["lng"],
                        len(leg["steps"]),
                        determineTravelMode(leg["steps"]),
                        # TODO: currently uses local timezone, need to adjust to utcfromtimestamp
                        datetime.fromtimestamp(
                            travelInfo["requestTimestamp"]).hour * 100 + datetime.fromtimestamp(
                            travelInfo["requestTimestamp"]).minute,
                        leg["duration"]["value"]
                    ]
                    csvWriter.writerow(elem)


main()
